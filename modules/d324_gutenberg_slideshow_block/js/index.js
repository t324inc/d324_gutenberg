/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _wp = wp,
    blocks = _wp.blocks,
    data = _wp.data,
    element = _wp.element,
    components = _wp.components,
    editor = _wp.editor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
    select = data.select;
var Fragment = element.Fragment;
var PanelBody = components.PanelBody,
    Button = components.Button,
    BaseControl = components.BaseControl,
    Icon = components.Icon,
    RangeControl = components.RangeControl,
    IconButton = components.IconButton,
    Toolbar = components.Toolbar,
    SelectControl = components.SelectControl;
var InnerBlocks = editor.InnerBlocks,
    RichText = editor.RichText,
    InspectorControls = editor.InspectorControls,
    PanelColorSettings = editor.PanelColorSettings,
    MediaUpload = editor.MediaUpload,
    BlockControls = editor.BlockControls;

var __ = Drupal.t;

var settings = {
  title: __('D324 Gutenberg Slideshow Block'),
  description: __('D324 Gutenberg Slideshow Block'),
  icon: 'welcome-learn-more',
  attributes: {
    title: {
      type: 'string'
    },
    images: {
      type: 'array'
    }
  },

  edit: function edit(_ref) {
    var className = _ref.className,
        attributes = _ref.attributes,
        setAttributes = _ref.setAttributes,
        isSelected = _ref.isSelected;
    var title = attributes.title,
        _attributes$images = attributes.images,
        images = _attributes$images === undefined ? [] : _attributes$images;

    var removeImage = function removeImage(_removeImage) {
      var newImages = images.filter(function (image) {
        if (image.id != _removeImage.id) {
          return image;
        }
      });

      setAttributes({
        images: newImages
      });
    };

    var displayImages = function displayImages(images) {
      return images.map(function (image) {
        return React.createElement(
          'div',
          { className: 'gallery-item-container' },
          React.createElement('img', { className: 'gallery-item', src: image.url, key: images.id }),
          React.createElement(
            'div',
            { className: 'remove-item', onClick: function onClick() {
                return removeImage(image);
              } },
            React.createElement('span', { 'class': 'dashicons dashicons-trash' })
          ),
          React.createElement(
            'div',
            { className: 'caption-text' },
            image.caption[0]
          )
        );
      });
    };

    return React.createElement(
      'div',
      null,
      React.createElement(RichText, {
        identifier: 'title',
        tagName: 'h2',
        value: title,
        placeholder: __('Title'),
        onChange: function onChange(nextTitle) {
          setAttributes({
            title: nextTitle
          });
        },
        onSplit: function onSplit() {
          return null;
        },
        unstableOnSplit: function unstableOnSplit() {
          return null;
        }
      }),
      React.createElement(
        'div',
        { className: 'gallery-grid' },
        displayImages(images)
      ),
      React.createElement('br', null),
      React.createElement(MediaUpload, {
        onSelect: function onSelect(media) {
          setAttributes({ images: [].concat(_toConsumableArray(images), _toConsumableArray(media)) });
        },
        type: 'image',
        multiple: true,
        value: images,
        render: function render(_ref2) {
          var open = _ref2.open;
          return React.createElement(
            Button,
            { className: 'select-images-button is-button is-default is-large', onClick: open },
            'Add images'
          );
        }
      })
    );
  },
  save: function save(_ref3) {
    var className = _ref3.className,
        attributes = _ref3.attributes;
    var title = attributes.title,
        _attributes$images2 = attributes.images,
        images = _attributes$images2 === undefined ? [] : _attributes$images2;

    var displayImages = function displayImages(images) {
      return images.map(function (image, index) {
        return React.createElement('img', {
          className: 'gallery-item',
          key: images.id,
          src: image.url,
          'data-slide-no': index,
          'data-caption': image.caption[0],
          alt: image.alt
        });
      });
    };

    return React.createElement(
      'div',
      { className: className },
      title && React.createElement(
        'h2',
        null,
        title
      ),
      React.createElement(
        'div',
        { className: 'gallery-grid', 'data-total-slides': images.length },
        displayImages(images)
      )
    );
  }
};

var category = {
  slug: 'example',
  title: __('Examples')
};

var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));

registerBlockType(category.slug + '/d324-gutenberg-slideshow-block', _extends({
  category: category.slug
}, settings));